#!/usr/bin/env node

'use strict';

const AWS = require('aws-sdk');
const fs = require('fs');
const ini = require('ini');
const path = require('path');
const readline = require('readline');

function assumeRole(profile, token) {
  const creds = new AWS.SharedIniFileCredentials({ profile: profile });
  const configFile = process.env['AWS_CONFIG_FILE'] || path.join(path.dirname(creds.filename), 'config');
  const config = ini.parse(fs.readFileSync(configFile, 'utf-8'))[`profile ${profile}`];
  const sts = new AWS.STS();

  return new Promise((resolve, reject) => {
    sts.assumeRole({
      RoleArn: config.role_arn,
      RoleSessionName: 'aws-auth-helper',
      SerialNumber: config.mfa_serial,
      TokenCode: token
    }, function (error, response) {
      if (error) {
        reject(error);
      } else {
        resolve(response);
      }
    });
  });
}

function getMFAToken(profile) {
  process.stdin.setEncoding('utf8');

  return new Promise((resolve, reject) => {
    process.stderr.write('ðŸ”’  AWS MFA token: ');

    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });

    rl.on('line', function(token) {
      rl.close();
      assumeRole(profile, token).then(response => {
        resolve(response.Credentials);
      }, reject);
    });
  });
}

function getProfileName() {
  if (process.argv.length > 2) {
    return process.argv[2];
  }
  if (process.env.AWS_PROFILE) {
    return process.env.AWS_PROFILE;
  }
  return 'default';
}

process.stderr.write(`Using the "${getProfileName()}" aws profile.\n`);
getMFAToken(getProfileName()).then(credentials => {
  process.stdout.write(`AWS_ACCESS_KEY_ID=${credentials.AccessKeyId} AWS_SECRET_ACCESS_KEY=${credentials.SecretAccessKey} AWS_SESSION_TOKEN=${credentials.SessionToken}`);
}).catch(error => {
  process.stderr.write(error.message + "\n");
  process.exitCode = 1;
});
